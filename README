[CS 6250] Advanced Operating Systems || Project-1 GTThreads
===========================================================

1. Linux Platform
===========================================================

The code was developed on Ubuntu 14.10 64-bit Operating system 
running on Intel® Core™ i5-4200U CPU @ 1.60GHz × 4 

2. Preemptive Scheduler Implementation
===========================================================

Following points describe my preemptive scheduler implementation:

a. 	The scheduler is implemented using a doubly linked list.
	Each Link contains pointers to previous and next as well as
	a pointer to its gtthread_t data structure.
	
b. 	gtthread_t contains:
		1. Thread ID.
		2. Parent Thread ID.
		3. Thread Context.
		4. States of the thread:
			a. Running.
			b. Exited.
			c. Finished.
			d. Cancelled.
		5. Return value of the thread.
		6. No. of active child threads.
		
c. 	The data structure queue_t represents a queue pointing to
	three parts of the doubly lined list:
		1. Begin of the linked list 		-- Always points to main
		2. End of the Linked list 			-- Always points to last added thread
		3. Running Node of the linked list 	-- Points to running thread
	It also contains length and a variable that tells if main exited or not.

d. 	On a gtthread_init, main thread is added to the schedule_queue and timer is 
	initiated to preempt every specified period.

e.	Now as gtthread_create is called, a wrapper function is created with thread
	function pointer and argument as arguments to the wrapper function. Wrapper
	function calls the main function and stores the return value in its gtthread_t 
	returnval field,

f. 	On a timer interrupt context is switched from running node to next running node in the
	schedule queue.
	
g. 	When every thread completes, exits or finishes its corresponding return value is stored and
	the thread is marked finished or exited in the schedule_queue.
	
h. 	Scheulde_queue never schedules exited, finished or cancelled thread.

3. Compiling and Running the code:
============================================================================

Just do make in the extracted folder. The binary name is out.

4. Philosopher's Dining Problem:
======================================================================

I avoid the deadlock between 5 philosophers with a simple trick:
	1. Philosopher 1 acquires chopsticks in this order: 1 and 2
	2. Philosopher 2 acquires chopsticks in this order: 3 and 2
	3. Philosopher 2 acquires chopsticks in this order: 4 and 3
	4. Philosopher 2 acquires chopsticks in this order: 5 and 4
	5. Philosopher 2 acquires chopsticks in this order: 1 and 5
	
	Thus in one full schedule, 
	Philosopher1 gets chopstick no.: 1
	Philosopher2 gets chopstick no.: 3
	Philosopher3 gets chopstick no.: 4
	Philosopher4 gets chopstick no.: 5
	Philosopher5 gets chopstick no.: No Chopstick as Philosopher 1 took it
	
	In Second Schedule,
	Philosopher1 gets chopstick no.: 2
	Philosopher2 gets chopstick no.: No Chopstick as Philosopher 1 took it
	Philosopher3 gets chopstick no.: No Chopstick as Philosopher 2 took it
	Philosopher4 gets chopstick no.: No Chopstick as Philosopher 3 took it
	Philosopher5 gets chopstick no.: No Chopstick as Philosopher 1 took it
	
	Now Philosopher 1 can eat his rice, and drop both chop sticks.
	When he drop his chop sticks, Philosopher 2 picks it up. Then Philosopher 3,
	Philosopher 4 and so on. Thus there never arrives a situation of deadlock
	as philosopher 1 follows a reverse order of picking up chopsticks as compared to 
	other philosophers.

5.	Thoughts on the Project;

	I have tested the code enough. I have taken care of almost all corner cases.
	Hope you do not face any issue with the same. Thanks!! 
	It was fun working on the project!!
	
	
	
	
	

